classdef SensorStatus < robotics.ros.Message
    %SensorStatus MATLAB implementation of am_driver/SensorStatus
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'am_driver/SensorStatus' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '79731b53ba1977d4781a04819333dd4d' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        SensorStatus_
        OperationalMode
        MowerInternalState
        ControlState
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ControlState', 'Header', 'MowerInternalState', 'OperationalMode', 'SensorStatus_'} % List of non-constant message properties
        ROSPropertyList = {'controlState', 'header', 'mowerInternalState', 'operationalMode', 'sensorStatus'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = SensorStatus(msg)
            %SensorStatus Construct the message object SensorStatus
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'SensorStatus', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function sensorstatus_ = get.SensorStatus_(obj)
            %get.SensorStatus_ Get the value for property SensorStatus_
            sensorstatus_ = typecast(int16(obj.JavaMessage.getSensorStatus), 'uint16');
        end
        
        function set.SensorStatus_(obj, sensorstatus_)
            %set.SensorStatus_ Set the value for property SensorStatus_
            validateattributes(sensorstatus_, {'numeric'}, {'nonempty', 'scalar'}, 'SensorStatus', 'SensorStatus_');
            
            obj.JavaMessage.setSensorStatus(sensorstatus_);
        end
        
        function operationalmode = get.OperationalMode(obj)
            %get.OperationalMode Get the value for property OperationalMode
            operationalmode = typecast(int16(obj.JavaMessage.getOperationalMode), 'uint16');
        end
        
        function set.OperationalMode(obj, operationalmode)
            %set.OperationalMode Set the value for property OperationalMode
            validateattributes(operationalmode, {'numeric'}, {'nonempty', 'scalar'}, 'SensorStatus', 'OperationalMode');
            
            obj.JavaMessage.setOperationalMode(operationalmode);
        end
        
        function mowerinternalstate = get.MowerInternalState(obj)
            %get.MowerInternalState Get the value for property MowerInternalState
            mowerinternalstate = typecast(int16(obj.JavaMessage.getMowerInternalState), 'uint16');
        end
        
        function set.MowerInternalState(obj, mowerinternalstate)
            %set.MowerInternalState Set the value for property MowerInternalState
            validateattributes(mowerinternalstate, {'numeric'}, {'nonempty', 'scalar'}, 'SensorStatus', 'MowerInternalState');
            
            obj.JavaMessage.setMowerInternalState(mowerinternalstate);
        end
        
        function controlstate = get.ControlState(obj)
            %get.ControlState Get the value for property ControlState
            controlstate = typecast(int16(obj.JavaMessage.getControlState), 'uint16');
        end
        
        function set.ControlState(obj, controlstate)
            %set.ControlState Set the value for property ControlState
            validateattributes(controlstate, {'numeric'}, {'nonempty', 'scalar'}, 'SensorStatus', 'ControlState');
            
            obj.JavaMessage.setControlState(controlstate);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SensorStatus_ = obj.SensorStatus_;
            cpObj.OperationalMode = obj.OperationalMode;
            cpObj.MowerInternalState = obj.MowerInternalState;
            cpObj.ControlState = obj.ControlState;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SensorStatus_ = strObj.SensorStatus_;
            obj.OperationalMode = strObj.OperationalMode;
            obj.MowerInternalState = strObj.MowerInternalState;
            obj.ControlState = strObj.ControlState;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SensorStatus_ = obj.SensorStatus_;
            strObj.OperationalMode = obj.OperationalMode;
            strObj.MowerInternalState = obj.MowerInternalState;
            strObj.ControlState = obj.ControlState;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.am_driver.SensorStatus.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.am_driver.SensorStatus;
            obj.reload(strObj);
        end
    end
end
