classdef Loop < robotics.ros.Message
    %Loop MATLAB implementation of am_driver/Loop
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'am_driver/Loop' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '4b11e9d8ae1b6b742fab1876c2b68d64' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        AmDriverLoopDataClass = robotics.ros.msg.internal.MessageFactory.getClassForType('am_driver/LoopData') % Dispatch to MATLAB class for message type am_driver/LoopData
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        FrontCenter
        FrontRight
        RearLeft
        RearRight
        A0
        N
        F
        G1
        G2
        G3
        QA0
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'A0', [], 'N', [], 'F', [], 'G1', [], 'G2', [], 'G3', [], 'QA0', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'A0', 'F', 'FrontCenter', 'FrontRight', 'G1', 'G2', 'G3', 'Header', 'N', 'QA0', 'RearLeft', 'RearRight'} % List of non-constant message properties
        ROSPropertyList = {'A0', 'F', 'frontCenter', 'frontRight', 'G1', 'G2', 'G3', 'header', 'N', 'QA0', 'rearLeft', 'rearRight'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Loop(msg)
            %Loop Construct the message object Loop
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Loop', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function frontcenter = get.FrontCenter(obj)
            %get.FrontCenter Get the value for property FrontCenter
            frontcenter = int32(obj.JavaMessage.getFrontCenter);
        end
        
        function set.FrontCenter(obj, frontcenter)
            %set.FrontCenter Set the value for property FrontCenter
            validateattributes(frontcenter, {'numeric'}, {'nonempty', 'scalar'}, 'Loop', 'FrontCenter');
            
            obj.JavaMessage.setFrontCenter(frontcenter);
        end
        
        function frontright = get.FrontRight(obj)
            %get.FrontRight Get the value for property FrontRight
            frontright = int32(obj.JavaMessage.getFrontRight);
        end
        
        function set.FrontRight(obj, frontright)
            %set.FrontRight Set the value for property FrontRight
            validateattributes(frontright, {'numeric'}, {'nonempty', 'scalar'}, 'Loop', 'FrontRight');
            
            obj.JavaMessage.setFrontRight(frontright);
        end
        
        function rearleft = get.RearLeft(obj)
            %get.RearLeft Get the value for property RearLeft
            rearleft = int32(obj.JavaMessage.getRearLeft);
        end
        
        function set.RearLeft(obj, rearleft)
            %set.RearLeft Set the value for property RearLeft
            validateattributes(rearleft, {'numeric'}, {'nonempty', 'scalar'}, 'Loop', 'RearLeft');
            
            obj.JavaMessage.setRearLeft(rearleft);
        end
        
        function rearright = get.RearRight(obj)
            %get.RearRight Get the value for property RearRight
            rearright = int32(obj.JavaMessage.getRearRight);
        end
        
        function set.RearRight(obj, rearright)
            %set.RearRight Set the value for property RearRight
            validateattributes(rearright, {'numeric'}, {'nonempty', 'scalar'}, 'Loop', 'RearRight');
            
            obj.JavaMessage.setRearRight(rearright);
        end
        
        function a0 = get.A0(obj)
            %get.A0 Get the value for property A0
            if isempty(obj.Cache.A0)
                obj.Cache.A0 = feval(obj.AmDriverLoopDataClass, obj.JavaMessage.getA0);
            end
            a0 = obj.Cache.A0;
        end
        
        function set.A0(obj, a0)
            %set.A0 Set the value for property A0
            validateattributes(a0, {obj.AmDriverLoopDataClass}, {'nonempty', 'scalar'}, 'Loop', 'A0');
            
            obj.JavaMessage.setA0(a0.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.A0)
                obj.Cache.A0.setJavaObject(a0.getJavaObject);
            end
        end
        
        function n = get.N(obj)
            %get.N Get the value for property N
            if isempty(obj.Cache.N)
                obj.Cache.N = feval(obj.AmDriverLoopDataClass, obj.JavaMessage.getN);
            end
            n = obj.Cache.N;
        end
        
        function set.N(obj, n)
            %set.N Set the value for property N
            validateattributes(n, {obj.AmDriverLoopDataClass}, {'nonempty', 'scalar'}, 'Loop', 'N');
            
            obj.JavaMessage.setN(n.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.N)
                obj.Cache.N.setJavaObject(n.getJavaObject);
            end
        end
        
        function f = get.F(obj)
            %get.F Get the value for property F
            if isempty(obj.Cache.F)
                obj.Cache.F = feval(obj.AmDriverLoopDataClass, obj.JavaMessage.getF);
            end
            f = obj.Cache.F;
        end
        
        function set.F(obj, f)
            %set.F Set the value for property F
            validateattributes(f, {obj.AmDriverLoopDataClass}, {'nonempty', 'scalar'}, 'Loop', 'F');
            
            obj.JavaMessage.setF(f.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.F)
                obj.Cache.F.setJavaObject(f.getJavaObject);
            end
        end
        
        function g1 = get.G1(obj)
            %get.G1 Get the value for property G1
            if isempty(obj.Cache.G1)
                obj.Cache.G1 = feval(obj.AmDriverLoopDataClass, obj.JavaMessage.getG1);
            end
            g1 = obj.Cache.G1;
        end
        
        function set.G1(obj, g1)
            %set.G1 Set the value for property G1
            validateattributes(g1, {obj.AmDriverLoopDataClass}, {'nonempty', 'scalar'}, 'Loop', 'G1');
            
            obj.JavaMessage.setG1(g1.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.G1)
                obj.Cache.G1.setJavaObject(g1.getJavaObject);
            end
        end
        
        function g2 = get.G2(obj)
            %get.G2 Get the value for property G2
            if isempty(obj.Cache.G2)
                obj.Cache.G2 = feval(obj.AmDriverLoopDataClass, obj.JavaMessage.getG2);
            end
            g2 = obj.Cache.G2;
        end
        
        function set.G2(obj, g2)
            %set.G2 Set the value for property G2
            validateattributes(g2, {obj.AmDriverLoopDataClass}, {'nonempty', 'scalar'}, 'Loop', 'G2');
            
            obj.JavaMessage.setG2(g2.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.G2)
                obj.Cache.G2.setJavaObject(g2.getJavaObject);
            end
        end
        
        function g3 = get.G3(obj)
            %get.G3 Get the value for property G3
            if isempty(obj.Cache.G3)
                obj.Cache.G3 = feval(obj.AmDriverLoopDataClass, obj.JavaMessage.getG3);
            end
            g3 = obj.Cache.G3;
        end
        
        function set.G3(obj, g3)
            %set.G3 Set the value for property G3
            validateattributes(g3, {obj.AmDriverLoopDataClass}, {'nonempty', 'scalar'}, 'Loop', 'G3');
            
            obj.JavaMessage.setG3(g3.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.G3)
                obj.Cache.G3.setJavaObject(g3.getJavaObject);
            end
        end
        
        function qa0 = get.QA0(obj)
            %get.QA0 Get the value for property QA0
            if isempty(obj.Cache.QA0)
                obj.Cache.QA0 = feval(obj.AmDriverLoopDataClass, obj.JavaMessage.getQA0);
            end
            qa0 = obj.Cache.QA0;
        end
        
        function set.QA0(obj, qa0)
            %set.QA0 Set the value for property QA0
            validateattributes(qa0, {obj.AmDriverLoopDataClass}, {'nonempty', 'scalar'}, 'Loop', 'QA0');
            
            obj.JavaMessage.setQA0(qa0.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.QA0)
                obj.Cache.QA0.setJavaObject(qa0.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.A0 = [];
            obj.Cache.N = [];
            obj.Cache.F = [];
            obj.Cache.G1 = [];
            obj.Cache.G2 = [];
            obj.Cache.G3 = [];
            obj.Cache.QA0 = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.FrontCenter = obj.FrontCenter;
            cpObj.FrontRight = obj.FrontRight;
            cpObj.RearLeft = obj.RearLeft;
            cpObj.RearRight = obj.RearRight;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.A0 = copy(obj.A0);
            cpObj.N = copy(obj.N);
            cpObj.F = copy(obj.F);
            cpObj.G1 = copy(obj.G1);
            cpObj.G2 = copy(obj.G2);
            cpObj.G3 = copy(obj.G3);
            cpObj.QA0 = copy(obj.QA0);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.FrontCenter = strObj.FrontCenter;
            obj.FrontRight = strObj.FrontRight;
            obj.RearLeft = strObj.RearLeft;
            obj.RearRight = strObj.RearRight;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.A0 = feval([obj.AmDriverLoopDataClass '.loadobj'], strObj.A0);
            obj.N = feval([obj.AmDriverLoopDataClass '.loadobj'], strObj.N);
            obj.F = feval([obj.AmDriverLoopDataClass '.loadobj'], strObj.F);
            obj.G1 = feval([obj.AmDriverLoopDataClass '.loadobj'], strObj.G1);
            obj.G2 = feval([obj.AmDriverLoopDataClass '.loadobj'], strObj.G2);
            obj.G3 = feval([obj.AmDriverLoopDataClass '.loadobj'], strObj.G3);
            obj.QA0 = feval([obj.AmDriverLoopDataClass '.loadobj'], strObj.QA0);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.FrontCenter = obj.FrontCenter;
            strObj.FrontRight = obj.FrontRight;
            strObj.RearLeft = obj.RearLeft;
            strObj.RearRight = obj.RearRight;
            strObj.Header = saveobj(obj.Header);
            strObj.A0 = saveobj(obj.A0);
            strObj.N = saveobj(obj.N);
            strObj.F = saveobj(obj.F);
            strObj.G1 = saveobj(obj.G1);
            strObj.G2 = saveobj(obj.G2);
            strObj.G3 = saveobj(obj.G3);
            strObj.QA0 = saveobj(obj.QA0);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.am_driver.Loop.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.am_driver.Loop;
            obj.reload(strObj);
        end
    end
end
