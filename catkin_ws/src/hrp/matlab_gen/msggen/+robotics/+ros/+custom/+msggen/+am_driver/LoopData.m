classdef LoopData < robotics.ros.Message
    %LoopData MATLAB implementation of am_driver/LoopData
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'am_driver/LoopData' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '14810c138ea56e7a9aeb63a60064efdb' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        FrontCenter
        FrontRight
        RearLeft
        RearRight
    end
    
    properties (Constant, Hidden)
        PropertyList = {'FrontCenter', 'FrontRight', 'RearLeft', 'RearRight'} % List of non-constant message properties
        ROSPropertyList = {'frontCenter', 'frontRight', 'rearLeft', 'rearRight'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = LoopData(msg)
            %LoopData Construct the message object LoopData
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function frontcenter = get.FrontCenter(obj)
            %get.FrontCenter Get the value for property FrontCenter
            frontcenter = int32(obj.JavaMessage.getFrontCenter);
        end
        
        function set.FrontCenter(obj, frontcenter)
            %set.FrontCenter Set the value for property FrontCenter
            validateattributes(frontcenter, {'numeric'}, {'nonempty', 'scalar'}, 'LoopData', 'FrontCenter');
            
            obj.JavaMessage.setFrontCenter(frontcenter);
        end
        
        function frontright = get.FrontRight(obj)
            %get.FrontRight Get the value for property FrontRight
            frontright = int32(obj.JavaMessage.getFrontRight);
        end
        
        function set.FrontRight(obj, frontright)
            %set.FrontRight Set the value for property FrontRight
            validateattributes(frontright, {'numeric'}, {'nonempty', 'scalar'}, 'LoopData', 'FrontRight');
            
            obj.JavaMessage.setFrontRight(frontright);
        end
        
        function rearleft = get.RearLeft(obj)
            %get.RearLeft Get the value for property RearLeft
            rearleft = int32(obj.JavaMessage.getRearLeft);
        end
        
        function set.RearLeft(obj, rearleft)
            %set.RearLeft Set the value for property RearLeft
            validateattributes(rearleft, {'numeric'}, {'nonempty', 'scalar'}, 'LoopData', 'RearLeft');
            
            obj.JavaMessage.setRearLeft(rearleft);
        end
        
        function rearright = get.RearRight(obj)
            %get.RearRight Get the value for property RearRight
            rearright = int32(obj.JavaMessage.getRearRight);
        end
        
        function set.RearRight(obj, rearright)
            %set.RearRight Set the value for property RearRight
            validateattributes(rearright, {'numeric'}, {'nonempty', 'scalar'}, 'LoopData', 'RearRight');
            
            obj.JavaMessage.setRearRight(rearright);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.FrontCenter = obj.FrontCenter;
            cpObj.FrontRight = obj.FrontRight;
            cpObj.RearLeft = obj.RearLeft;
            cpObj.RearRight = obj.RearRight;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.FrontCenter = strObj.FrontCenter;
            obj.FrontRight = strObj.FrontRight;
            obj.RearLeft = strObj.RearLeft;
            obj.RearRight = strObj.RearRight;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.FrontCenter = obj.FrontCenter;
            strObj.FrontRight = obj.FrontRight;
            strObj.RearLeft = obj.RearLeft;
            strObj.RearRight = obj.RearRight;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.am_driver.LoopData.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.am_driver.LoopData;
            obj.reload(strObj);
        end
    end
end
